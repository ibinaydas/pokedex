{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","this","props","pokeInfo","id","name","type","base_experience","paddedId","toString","padStart","imagePath","className","style","color","textAlign","src","alt","React","Component","Pokedex","pokemonList","totalExp","isWinner","pokeList","map","x","key","Pokegame","firstHand","secondHand","length","idx","Math","floor","random","push","splice","firstHandExp","reduce","y","secondHandExp","defaultProps","App","data-testid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SA0BeA,G,6KAtBD,IAAD,EACuCC,KAAKC,MAAMC,SAA/CC,EADH,EACGA,GAAIC,EADP,EACOA,KAAMC,EADb,EACaA,KAAMC,EADnB,EACmBA,gBAClBC,EAAWJ,EAAGK,WAAWC,SAAS,EAAG,KACrCC,EAAS,oEAAgEH,EAAhE,QAEf,OACI,yBAAKI,UAAU,YACX,gCACI,wBAAIC,MAJK,CAAEC,MAAO,aAAcC,UAAW,WAIjBV,IAE9B,8BACI,yBAAKO,UAAU,iBAAiBI,IAAKL,EAAWM,IAAKZ,KAEzD,4BAAQO,UAAU,mBACd,uCAAaN,GACb,sCAAYC,S,GAhBTW,IAAMC,YCmBdC,G,6KAjBD,IAAD,EACuCnB,KAAKC,MAAzCmB,EADH,EACGA,YAAaC,EADhB,EACgBA,SAAUC,EAD1B,EAC0BA,SACzBC,EAAWH,EAAYI,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAUC,IAAKD,EAAEtB,GAAID,SAAUuB,OACrE,OACI,yBAAKd,UAAU,WACX,4BAAQA,UAAU,kBACd,wBAAIC,MAAO,CAAEC,MAAOS,EAAW,YAAc,YAAcA,EAAW,eAAiB,eACvF,iDAAuBD,IAE3B,0BAAMV,UAAU,mBACXY,Q,GAXCN,IAAMC,YCDtBS,E,uKAgBE,IAFA,IAAMC,EAAY,GACZC,EAAU,YAAO7B,KAAKC,MAAMmB,aAC3BQ,EAAUE,OAASD,EAAWC,QAAQ,CACzC,IAAIC,EAAMC,KAAKC,MAAMD,KAAKE,SAAWL,EAAWC,QAChDF,EAAUO,KAAKN,EAAWO,OAAOL,EAAK,GAAG,IAE7C,IAAMM,EAAeT,EAAUU,QAAO,SAACb,EAAGc,GAAJ,OAAUd,EAAIc,EAAEjC,kBAAiB,GACjEkC,EAAgBX,EAAWS,QAAO,SAACb,EAAGc,GAAJ,OAAUd,EAAIc,EAAEjC,kBAAiB,GACzE,OACI,yBAAKK,UAAU,YACX,kBAAC,EAAD,CAASS,YAAaQ,EAAWP,SAAUgB,EAAcf,SAAUe,EAAeG,IAClF,6BACA,kBAAC,EAAD,CAASpB,YAAaS,EAAYR,SAAUmB,EAAelB,SAAUkB,EAAgBH,S,GA1B9EpB,IAAMC,WAAvBS,EACKc,aAAe,CAClBrB,YAAa,CACT,CAAEjB,GAAI,EAAGC,KAAM,aAAcC,KAAM,OAAQC,gBAAiB,IAC5D,CAAEH,GAAI,EAAGC,KAAM,WAAYC,KAAM,QAASC,gBAAiB,IAC3D,CAAEH,GAAI,GAAIC,KAAM,UAAWC,KAAM,MAAOC,gBAAiB,IACzD,CAAEH,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUC,gBAAiB,KAC/D,CAAEH,GAAI,GAAIC,KAAM,UAAWC,KAAM,WAAYC,gBAAiB,KAC9D,CAAEH,GAAI,GAAIC,KAAM,aAAcC,KAAM,SAAUC,gBAAiB,IAC/D,CAAEH,GAAI,GAAIC,KAAM,SAAUC,KAAM,SAAUC,gBAAiB,KAC3D,CAAEH,GAAI,IAAKC,KAAM,QAASC,KAAM,SAAUC,gBAAiB,MAsBxDqB,Q,MCvBAe,MARf,WACE,OACE,yBAAKC,cAAY,MAAMhC,UAAU,OAC/B,kBAAC,EAAD,QCKciC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff45f7a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Pokecard.css';\r\n\r\nclass Pokecard extends React.Component {\r\n    render() {\r\n        const { id, name, type, base_experience } = this.props.pokeInfo;\r\n        const paddedId = id.toString().padStart(3, \"0\");\r\n        const imagePath = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${paddedId}.png`;\r\n        const headingStyle = { color: 'mediumblue', textAlign: 'center' };\r\n        return (\r\n            <div className=\"Pokecard\">\r\n                <header>\r\n                    <h2 style={headingStyle}>{name}</h2>\r\n                </header>\r\n                <main>\r\n                    <img className=\"Pokecard-Image\" src={imagePath} alt={name} />\r\n                </main>\r\n                <footer className=\"Pokecard-Footer\">\r\n                    <span>Type: {type}</span>\r\n                    <span>EXP: {base_experience}</span>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokecard;","import React from 'react';\r\nimport Pokecard from './Pokecard';\r\nimport './Pokedex.css';\r\n\r\nclass Pokedex extends React.Component {\r\n    render() {\r\n        const { pokemonList, totalExp, isWinner } = this.props;\r\n        const pokeList = pokemonList.map(x => <Pokecard key={x.id} pokeInfo={x} />);\r\n        return (\r\n            <div className=\"Pokedex\">\r\n                <header className=\"Pokedex-Header\">\r\n                    <h1 style={{ color: isWinner ? 'darkgreen' : 'darkred' }}>{isWinner ? 'Winning Hand' : 'Losing Hand'}</h1>\r\n                    <h3>Total Experience: {totalExp}</h3>\r\n                </header>\r\n                <main className=\"Pokedex-Content\">\r\n                    {pokeList}\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokedex;","import React from 'react';\r\nimport Pokedex from './Pokedex';\r\n\r\nclass Pokegame extends React.Component {\r\n    static defaultProps = {\r\n        pokemonList: [\r\n            { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\r\n            { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\r\n            { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\r\n            { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\r\n            { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\r\n            { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\r\n            { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\r\n            { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\r\n        ]\r\n    };\r\n    render() {\r\n        const firstHand = [];\r\n        const secondHand = [...this.props.pokemonList];\r\n        while (firstHand.length < secondHand.length) {\r\n            let idx = Math.floor(Math.random() * secondHand.length);\r\n            firstHand.push(secondHand.splice(idx, 1)[0]);\r\n        }\r\n        const firstHandExp = firstHand.reduce((x, y) => x + y.base_experience, 0);\r\n        const secondHandExp = secondHand.reduce((x, y) => x + y.base_experience, 0);\r\n        return (\r\n            <div className=\"Pokegame\">\r\n                <Pokedex pokemonList={firstHand} totalExp={firstHandExp} isWinner={firstHandExp > secondHandExp} />\r\n                <hr />\r\n                <Pokedex pokemonList={secondHand} totalExp={secondHandExp} isWinner={secondHandExp > firstHandExp} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pokegame;","import React from 'react';\nimport Pokegame from './Pokegame';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div data-testid=\"app\" className=\"App\">\n      <Pokegame />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}